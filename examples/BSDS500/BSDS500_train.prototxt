name: "BSDS500_BD"

layer {
  name: "data"
  type: "ImageLabelmapData"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: false
    mean_value: 104.00699
    mean_value: 116.66877
    mean_value: 122.67892
  }
  image_data_param {
    root_folder: "data/BSDS500/"
    source: "data/BSDS500/train_pair.lst"
    batch_size: 1
    shuffle: false
    new_height: 0
    new_width: 0
  }
}
layer {
  name: "data"
  type: "ImageLabelmapData"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    mean_value: 104.00699
    mean_value: 116.66877
    mean_value: 122.67892
  }
  image_data_param {
    root_folder: "data/BSDS500/"
    source: "data/BSDS500/train_pair.lst"
    #Just setup the network. No real online testing
    batch_size: 1
    shuffle: false
    new_height: 0
    new_width: 0
  }
}

# Convolution_block-1
layer {  
  name: "conv1"
  type: "Convolution"
  bottom: "data"  
  top: "conv1"  
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param { 
    num_output: 64    
    pad: 1    
    kernel_size: 3  
    stride: 1
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
  }
}
layer {  
  name: "relu_c1"   
  type: "ReLU"
  bottom: "conv1"  
  top: "conv1"  
  }
layer {
  name: "pool1"  
  type: "Pooling"
  bottom: "conv1"  
  top: "pool1" 
  #top: "pool1_mask"  
  pooling_param {    
    pool: MAX    
    kernel_size: 2    
    stride: 2  
  }
}

# Convolution_block-2
layer {  
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"  
  top: "conv2"  
  param {
      lr_mult: 1
    }
    param {
      lr_mult: 2
    }
  convolution_param { 
    num_output: 256    
    pad: 1    
    kernel_size: 3  
    stride: 1
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
  }
}
layer {  
  name: "relu_c2"   
  type: "ReLU"
  bottom: "conv2"  
  top: "conv2"  
  }
layer {
  name: "pool2"  
  type: "Pooling"
  bottom: "conv2"  
  top: "pool2" 
  #top: "pool2_mask"  
  pooling_param {    
    pool: MAX    
    kernel_size: 2    
    stride: 2  
  }
}

# Convolution_block-3
layer {  
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"  
  top: "conv3"  
  param {
      lr_mult: 1
    }
    param {
      lr_mult: 2
    }
  convolution_param { 
    engine: CAFFE   
    num_output: 1    
    pad: 1    
    kernel_size: 3  
    stride: 1
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
  }
}
layer {  
  name: "relu_c3"   
  type: "ReLU"
  bottom: "conv3"  
  top: "conv3"  
}


layer {
  name: "pool_l1"  
  type: "Pooling"
  bottom: "label"  
  top: "pool_l1" 
  #top: "pool_l_mask1"  
  pooling_param {    
    pool: MAX    
    kernel_size: 2    
    stride: 2  
  }
}
layer {
  name: "pool_l2"  
  type: "Pooling"
  bottom: "pool_l1"  
  top: "pool_l2" 
  #top: "pool_l_mask2"  
  pooling_param {    
    pool: MAX    
    kernel_size: 2    
    stride: 2  
  }
}


layer { 
  type: "EuclideanLoss" 
  #"SigmoidCrossEntropyLoss" "EuclideanLoss"
  bottom: "conv3" 
  bottom: "pool_l2" 
  top:"loss"  
  loss_weight: 1
}


